DEPLOYMENT DO SITIO web
PASOS

 Creamos o requiremnts.txt
Neste caso vamos o directorio que no meu caso é: C:\Users\talle\Desktop\terrameiga
E executo o seguinte comando: pip freeze > requirements.txt

Creamos o Procfile. Creamos un archivo e non lle damos ningunha exetensión.
Mira como está creado nalgún dos teus proxectos.

Creamos o runtime.txt onde metemos a version de python. No meu caso sería:
python-3.9.13
Para ver a versión de python tes que facer "python --version"

No proxecto creamos un novo settings.py que lle chamo "settings_deployment.py" e onde facemos toda a configuracion do deployment

No "settings_deployment.py", poño un asterisco nos ALLOWED_HOSTS = ["*"]

Creamos un proxecto en Railway

Creamos a base de datos en Railway. Para eso doulle a New e doulle a "Database" e a Postgres (a do elefante)
e a base de datos onde van a ir os arquivos estáticos está creada

Configuramos a base de datos no settings_deployment.py. Para eso meto os credenciales da
base de datos no arquivo do settings. Bótalle un ollo ao vídeo que grabaches para ver como
podes ocultar as variables: ( https://www.youtube.com/watch?v=NUqtNglEcCU ) á hora de configurar
o arquivo "DATA_BASE".

IMPORTANTE. O CALOR DO "ENGINE" TEN QUE ESTAR ASÍ, AO DESCUBERTO.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': '*****',
        'USER': '********', 
        'PASSWORD': '*****************',
        'HOST': '************', 
        'PORT': '******',
    }
}


Vamos coller todos os arquivos estáticos do proxecto e vaise crear unha nova carpeta chamada staticfiles. Esto é para telo todo xunto e despois é máis fácil subilo todo ao S3 (AWS)
Para eso facemos: "python manage.py collectstatic". A carpeta chámase "staticfiles" por como denominaches o STATIC_ROOT no arquivo settings:
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

Facemos un git add . e git commit e git push para ter todo actualizado en GitHub.

Conectamos con railway para subir as tablas dos nosos modelos.
Se non temos instalado o paquete de Railway: scoop install railway
Despois logeamos:
railway login
railway link
railway run python manage.py makemigrations
--Neste caso, por ser un caso especial e ter esta liña de código no settings: AUTH_USER_MODEL = 'registration.CustomUser'
--Tiveches que executar os seguintes comandos:
--railway run python manage.py makemigrations registration
--railway run python manage.py migrate registration
--railway run python manage.py makemigrations bicicleteiros
--railway run python manage.py migrate bicicleteiros
--railway run python manage.py migrate --run-syncdb (Este comando túveno que facer porque senon non me cargaba as tablas en railway)

railway run python manage.py migrate
railway up

Despois no settings metinlle a seguinte liña para non ter problemas á hora de completar cualquer formulario:
CSRF_TRUSTED_ORIGINS = ['https://terrameiga.bike', 'https://*.terrameiga.bike', 'https://terrameiga-production.up.railway.app', 'https://terrameiga-production.up.railway.app*']


CONFIGURACIÓN DE AWS PARA OS MEDIA FILES.
Pomos no settings.py de producción as seguintes variables:
AWS_ACCESS_KEY_ID = '*******************'
AWS_SECRET_ACCESS_KEY = '***********************'
AWS_STORAGE_BUCKET_NAME = '************'

Instalamos:
pip install django-storages
pip install boto3

No setting de producción incluímos no campo de "INSTALLED APPS" a app "storages"








